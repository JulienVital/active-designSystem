// vitest.config.ts
import { fileURLToPath as fileURLToPath2 } from "node:url";
import { mergeConfig, defineConfig as defineConfig2, configDefaults } from "file:///home/jvital/Active/designSystem/node_modules/vitest/dist/config.js";

// vite.config.ts
import { defineConfig } from "file:///home/jvital/Active/designSystem/node_modules/vite/dist/node/index.js";
import path from "path";
import vue from "file:///home/jvital/Active/designSystem/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import { fileURLToPath } from "url";
import dts from "file:///home/jvital/Active/designSystem/node_modules/vite-plugin-dts/dist/index.mjs";
var __vite_injected_original_dirname = "/home/jvital/Active/designSystem";
var __vite_injected_original_import_meta_url = "file:///home/jvital/Active/designSystem/vite.config.ts";
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    dts({ rollupTypes: true })
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  build: {
    lib: {
      entry: path.resolve(__vite_injected_original_dirname, "src/index.ts"),
      name: "active-designsystem",
      formats: ["es"],
      // adding 'umd' requires globals set to every external module
      fileName: `active-designsystem`
    },
    rollupOptions: {
      // external modules won't be bundled into your library
      external: ["vue", /primevue\/.+/],
      // not every external has a global
      output: {
        globals: {
          vue: "Vue"
        }
      }
    },
    emptyOutDir: false
    // to retain the types folder generated by tsc
  }
});

// vitest.config.ts
var __vite_injected_original_import_meta_url2 = "file:///home/jvital/Active/designSystem/vitest.config.ts";
var vitest_config_default = mergeConfig(
  vite_config_default,
  defineConfig2({
    test: {
      environment: "jsdom",
      exclude: [...configDefaults.exclude, "e2e/*"],
      root: fileURLToPath2(new URL("./", __vite_injected_original_import_meta_url2)),
      css: {
        exclude: new RegExp(".+stylesheets.js")
      }
    }
  })
);
export {
  vitest_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZXN0LmNvbmZpZy50cyIsICJ2aXRlLmNvbmZpZy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9ob21lL2p2aXRhbC9BY3RpdmUvZGVzaWduU3lzdGVtXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9qdml0YWwvQWN0aXZlL2Rlc2lnblN5c3RlbS92aXRlc3QuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL2p2aXRhbC9BY3RpdmUvZGVzaWduU3lzdGVtL3ZpdGVzdC5jb25maWcudHNcIjtpbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAnbm9kZTp1cmwnXG5pbXBvcnQgeyBtZXJnZUNvbmZpZywgZGVmaW5lQ29uZmlnLCBjb25maWdEZWZhdWx0cyB9IGZyb20gJ3ZpdGVzdC9jb25maWcnXG5pbXBvcnQgdml0ZUNvbmZpZyBmcm9tICcuL3ZpdGUuY29uZmlnJ1xuXG5leHBvcnQgZGVmYXVsdCBtZXJnZUNvbmZpZyhcbiAgdml0ZUNvbmZpZyxcbiAgZGVmaW5lQ29uZmlnKHtcbiAgICB0ZXN0OiB7XG4gICAgICBlbnZpcm9ubWVudDogJ2pzZG9tJyxcbiAgICAgIGV4Y2x1ZGU6IFsuLi5jb25maWdEZWZhdWx0cy5leGNsdWRlLCAnZTJlLyonXSxcbiAgICAgIHJvb3Q6IGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi8nLCBpbXBvcnQubWV0YS51cmwpKSxcbiAgICAgIGNzczoge1xuICAgICAgICAgIGV4Y2x1ZGU6IG5ldyBSZWdFeHAoXCIuK3N0eWxlc2hlZXRzLmpzXCIpXG4gICAgfVxuICAgIH1cbiAgfSlcbilcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL2hvbWUvanZpdGFsL0FjdGl2ZS9kZXNpZ25TeXN0ZW1cIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9ob21lL2p2aXRhbC9BY3RpdmUvZGVzaWduU3lzdGVtL3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL2p2aXRhbC9BY3RpdmUvZGVzaWduU3lzdGVtL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgdnVlIGZyb20gXCJAdml0ZWpzL3BsdWdpbi12dWVcIjtcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tIFwidXJsXCI7XG5pbXBvcnQgZHRzIGZyb20gJ3ZpdGUtcGx1Z2luLWR0cydcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHBsdWdpbnM6IFtcbiAgICB2dWUoKSwgXG4gICAgZHRzKHsgcm9sbHVwVHlwZXM6IHRydWUgfSlcbiAgXSxcbiAgXG4gIHJlc29sdmU6IHtcbiAgICBhbGlhczoge1xuICAgICAgXCJAXCI6IGZpbGVVUkxUb1BhdGgobmV3IFVSTChcIi4vc3JjXCIsIGltcG9ydC5tZXRhLnVybCkpLFxuICAgIH0sXG4gIH0sXG4gIGJ1aWxkOiB7XG4gICAgbGliOiB7XG4gICAgICBlbnRyeTogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ3NyYy9pbmRleC50cycpLFxuICAgICAgbmFtZTogJ2FjdGl2ZS1kZXNpZ25zeXN0ZW0nLFxuICAgICAgZm9ybWF0czogWydlcyddLCAvLyBhZGRpbmcgJ3VtZCcgcmVxdWlyZXMgZ2xvYmFscyBzZXQgdG8gZXZlcnkgZXh0ZXJuYWwgbW9kdWxlXG4gICAgICBmaWxlTmFtZTpgYWN0aXZlLWRlc2lnbnN5c3RlbWAsXG4gICAgfSxcbiAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICAvLyBleHRlcm5hbCBtb2R1bGVzIHdvbid0IGJlIGJ1bmRsZWQgaW50byB5b3VyIGxpYnJhcnlcbiAgICAgIGV4dGVybmFsOiBbJ3Z1ZScsIC9wcmltZXZ1ZVxcLy4rL10sIC8vIG5vdCBldmVyeSBleHRlcm5hbCBoYXMgYSBnbG9iYWxcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBnbG9iYWxzOiB7XG4gICAgICAgICAgdnVlOiAnVnVlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBlbXB0eU91dERpcjogZmFsc2UsIC8vIHRvIHJldGFpbiB0aGUgdHlwZXMgZm9sZGVyIGdlbmVyYXRlZCBieSB0c2NcbiAgfSxcbn0pOyJdLAogICJtYXBwaW5ncyI6ICI7QUFBc1IsU0FBUyxpQkFBQUEsc0JBQXFCO0FBQ3BULFNBQVMsYUFBYSxnQkFBQUMsZUFBYyxzQkFBc0I7OztBQ0R3TixTQUFTLG9CQUFvQjtBQUMvUyxPQUFPLFVBQVU7QUFDakIsT0FBTyxTQUFTO0FBQ2hCLFNBQVMscUJBQXFCO0FBQzlCLE9BQU8sU0FBUztBQUpoQixJQUFNLG1DQUFtQztBQUErSCxJQUFNLDJDQUEyQztBQU96TixJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTO0FBQUEsSUFDUCxJQUFJO0FBQUEsSUFDSixJQUFJLEVBQUUsYUFBYSxLQUFLLENBQUM7QUFBQSxFQUMzQjtBQUFBLEVBRUEsU0FBUztBQUFBLElBQ1AsT0FBTztBQUFBLE1BQ0wsS0FBSyxjQUFjLElBQUksSUFBSSxTQUFTLHdDQUFlLENBQUM7QUFBQSxJQUN0RDtBQUFBLEVBQ0Y7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sS0FBSyxRQUFRLGtDQUFXLGNBQWM7QUFBQSxNQUM3QyxNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsSUFBSTtBQUFBO0FBQUEsTUFDZCxVQUFTO0FBQUEsSUFDWDtBQUFBLElBQ0EsZUFBZTtBQUFBO0FBQUEsTUFFYixVQUFVLENBQUMsT0FBTyxjQUFjO0FBQUE7QUFBQSxNQUNoQyxRQUFRO0FBQUEsUUFDTixTQUFTO0FBQUEsVUFDUCxLQUFLO0FBQUEsUUFDUDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxhQUFhO0FBQUE7QUFBQSxFQUNmO0FBQ0YsQ0FBQzs7O0FEcEN5SyxJQUFNQyw0Q0FBMkM7QUFJM04sSUFBTyx3QkFBUTtBQUFBLEVBQ2I7QUFBQSxFQUNBQyxjQUFhO0FBQUEsSUFDWCxNQUFNO0FBQUEsTUFDSixhQUFhO0FBQUEsTUFDYixTQUFTLENBQUMsR0FBRyxlQUFlLFNBQVMsT0FBTztBQUFBLE1BQzVDLE1BQU1DLGVBQWMsSUFBSSxJQUFJLE1BQU1GLHlDQUFlLENBQUM7QUFBQSxNQUNsRCxLQUFLO0FBQUEsUUFDRCxTQUFTLElBQUksT0FBTyxrQkFBa0I7QUFBQSxNQUM1QztBQUFBLElBQ0E7QUFBQSxFQUNGLENBQUM7QUFDSDsiLAogICJuYW1lcyI6IFsiZmlsZVVSTFRvUGF0aCIsICJkZWZpbmVDb25maWciLCAiX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCIsICJkZWZpbmVDb25maWciLCAiZmlsZVVSTFRvUGF0aCJdCn0K
